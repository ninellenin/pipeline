package pipeline.runtime;

/*Generated by MPS */

import java.util.List;
import java.util.concurrent.ConcurrentLinkedQueue;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.LinkedList;

public class ChooseLongestText extends Filter<TextItem, TextItem> {
  private List<Filter<?, TextItem>> inputs;
  private ConcurrentLinkedQueue<TextItem> output;

  public ChooseLongestText(Filter<?, TextItem>... inputs) {
    this.inputs = ListSequence.fromList(new LinkedList<Filter<?, TextItem>>());
    for (Filter<?, TextItem> filter : inputs) {
      if (filter != null) {
        ListSequence.fromList(this.inputs).addElement(filter);
      }
    }
    output = new ConcurrentLinkedQueue<TextItem>();
  }

  @Override
  public void run() {
    List<StringBuilder> builders = ListSequence.fromList(new LinkedList<StringBuilder>());
    for (Filter<?, TextItem> filter : inputs) {
      filter.start();
      ListSequence.fromList(builders).addElement(new StringBuilder());
    }

    output.add(new TextItem(Item.State.KEY_WORD, TextItem.BEGIN_OF_TEXT));
    int i = 0;
    for (Filter<?, TextItem> filter : inputs) {
      TextItem item = filter.getItem();

      while (!((item.getState() == Item.State.KEY_WORD && item.getValue().equals(TextItem.END_OF_TEXT)))) {
        if (item.getState() == Item.State.STR) {
          ListSequence.fromList(builders).getElement(i).append(item.getValue() + " ");
        }
        item = filter.getItem();
      }
      ++i;
    }
    int max = 0;
    int max_index = 0;
    for (int j = 0; j < ListSequence.fromList(inputs).count(); ++j) {
      if (max < ListSequence.fromList(builders).getElement(j).length()) {
        max_index = j;
        max = ListSequence.fromList(builders).getElement(j).length();
      }
    }
    output.add(new TextItem(Item.State.STR, ListSequence.fromList(builders).getElement(max_index).toString()));
    output.add(new TextItem(Item.State.KEY_WORD, TextItem.END_OF_TEXT));
  }

  @Override
  public TextItem getItem() {
    TextItem item = output.poll();
    if (item == null) {
      return new TextItem(Item.State.EMPTY, null);
    } else {
      return item;
    }
  }
}
