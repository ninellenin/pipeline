package pipeline.runtime;

/*Generated by MPS */

import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.LinkedList;

public class SplitText implements IFilter {
  private ConcurrentLinkedQueue<String> input;
  private ConcurrentLinkedQueue<String> output;
  private List<ConcurrentLinkedQueue> listQueue;
  public static final String END_OF_TEXT = "<END_OF_TEXT>";


  public SplitText(ConcurrentLinkedQueue<String> input) {
    this.input = input;
    listQueue = ListSequence.fromList(new LinkedList<ConcurrentLinkedQueue>());
    output = new ConcurrentLinkedQueue();
    ListSequence.fromList(listQueue).addElement(output);
  }
  @Override
  public void run() {
    System.out.println("RUUUUN!!!");
    String str = input.poll();
    System.out.println("POOOOOL");

    while (!(END_OF_TEXT.equals(str))) {
      System.out.println("I am in cycle!!!");

      if (str != null) {
        System.out.println("Try print!!!");

        output.add(str);
      }
      str = input.poll();
    }
  }

  @Override
  public List<ConcurrentLinkedQueue> getQueueList() {
    return listQueue;
  }

  @Override
  public ConcurrentLinkedQueue getFirstOutput() {
    return output;
  }
}
