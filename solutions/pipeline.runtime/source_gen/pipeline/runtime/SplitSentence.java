package pipeline.runtime;

/*Generated by MPS */

import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.LinkedList;

public class SplitSentence extends Filter<SentenceItem, TokenItem> {
  private Filter<?, SentenceItem> input;
  private ConcurrentLinkedQueue<TokenItem> output;

  public SplitSentence(Filter<?, SentenceItem> input) {
    System.out.println("SplitSentence created");
    this.input = input;
    output = new ConcurrentLinkedQueue<TokenItem>();
  }

  @Override
  public void run() {
    input.start();
    SentenceItem item = input.getItem();

    StringBuilder builder = new StringBuilder();

    while (!((item.getState() == Item.State.KEY_WORD && item.getValue().equals(TextItem.END_OF_TEXT)))) {

      if (item.getState() != Item.State.EMPTY) {
        if (item.getState() == Item.State.KEY_WORD) {
          if (item.getValue().equals(SentenceItem.BEGIN_OF_SENTENCE)) {
            builder = new StringBuilder();
          } else if (item.getValue().equals(SentenceItem.END_OF_SENTENCE)) {
            List<TokenItem> tokenItems = splitOnSentences(builder.toString());
            output.addAll(tokenItems);
          }
          TokenItem itemOutput = new TokenItem(item.getState(), item.getValue());
          output.add(itemOutput);
        } else {
          builder.append(" ").append(item.getValue());
        }
      }
      item = input.getItem();
    }
    output.add(new TokenItem(Item.State.KEY_WORD, TextItem.END_OF_TEXT));
  }

  private List<TokenItem> splitOnSentences(String str) {
    List<TokenItem> tokens = ListSequence.fromList(new LinkedList<TokenItem>());
    StringBuilder tokenBuilder = new StringBuilder();
    for (int i = 0; i < str.length(); i++) {
      char symbol = str.charAt(i);
      if (Character.isLetterOrDigit(symbol)) {
        tokenBuilder.append(symbol);
      } else {
        if (tokenBuilder.length() > 0) {
          ListSequence.fromList(tokens).addElement(new TokenItem(Item.State.STR, tokenBuilder.toString()));
          System.out.println("Add token: " + tokenBuilder.toString());
          tokenBuilder = new StringBuilder();
        }
      }
    }
    if (tokenBuilder.length() > 0) {
      ListSequence.fromList(tokens).addElement(new TokenItem(Item.State.STR, tokenBuilder.toString()));
      System.out.println("Add token: " + tokenBuilder.toString());
    }
    return tokens;
  }

  @Override
  public TokenItem getItem() {
    TokenItem item = output.poll();
    if (item == null) {
      return new TokenItem(Item.State.EMPTY, null);
    } else {
      return item;
    }
  }
}
