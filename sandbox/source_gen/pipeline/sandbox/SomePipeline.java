package pipeline.sandbox;

/*Generated by MPS */

import java.io.BufferedReader;
import java.io.PrintWriter;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.io.FileReader;
import java.io.FileOutputStream;

public class SomePipeline {
  private BufferedReader input;
  private PrintWriter output;
  private ConcurrentLinkedQueue<String> startQueue;
  private ConcurrentLinkedQueue<String> endQueue;
  private final String END_OF_TEXT = "<END_OF_TEXT>";

  public SomePipeline() {
    // ready to go 
    try {
      System.out.println("Init start");

      input = new BufferedReader(new FileReader("/home/yulya/Univer/DT/languages/pipeline/input"));
      output = new PrintWriter(new FileOutputStream("/home/yulya/Univer/DT/languages/pipeline/output1"), true);
      startQueue = new ConcurrentLinkedQueue<String>();
      // init filters 
      endQueue = startQueue;
      System.out.println("Init finish");
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public void myRun() {
    try {
      // run filters 

      Thread finalThread = new Thread(new Runnable() {
        public void run() {
          System.out.println("RUUUUN!!!");
          String str = endQueue.poll();
          System.out.println("POOOOOL");

          while (!(END_OF_TEXT.equals(str))) {
            System.out.println("I am in cycle!!!");

            if (str != null) {
              System.out.println("Try print!!!");

              output.print(str);
            }
            str = endQueue.poll();
          }
        }
      });
      finalThread.start();
      String str;
      while ((str = input.readLine()) != null) {
        startQueue.add(str);
      }
      input.close();

      startQueue.add(END_OF_TEXT);
      finalThread.join();

      output.close();

    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public static void main(String[] args) {
    System.out.println("main()");
    (new SomePipeline()).myRun();
  }
}
