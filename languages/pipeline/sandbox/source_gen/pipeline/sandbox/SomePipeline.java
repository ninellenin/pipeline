package pipeline.sandbox;

/*Generated by MPS */

import java.io.PrintWriter;
import pipeline.runtime.Filter;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import pipeline.runtime.Item;
import pipeline.runtime.TextItem;
import pipeline.runtime.ConcatenateTexts;
import pipeline.runtime.Reader;
import pipeline.runtime.MergeSentences;
import pipeline.runtime.MergeTokens;
import pipeline.runtime.UpperCaseToken;
import pipeline.runtime.SplitSentence;
import pipeline.runtime.SplitText;

public class SomePipeline {
  private class Writer extends Thread {
    private PrintWriter output;
    private Filter input;

    public Writer(String filename, Filter input) {
      try {
        output = new PrintWriter(new FileOutputStream(filename), true);
      } catch (FileNotFoundException e) {
        e.printStackTrace();
      }
      this.input = input;
    }
    @Override
    public void run() {
      Item item = input.getItem();

      while (!((item.getState() == Item.State.KEY_WORD && item.getValue().equals(TextItem.END_OF_TEXT)))) {
        if (item.getState() != Item.State.EMPTY && !(item.isBeginOfText())) {
          output.write(item.getValue());
        }
        item = input.getItem();
      }
      System.out.println("Writer finished!");
      output.close();
    }
  }

  private SomePipeline.Writer writer;
  private Filter filter;

  public SomePipeline() {
    System.out.println("Init start");
    filter = new ConcatenateTexts(new Reader("D:/PipelineRight/input.txt"), new MergeSentences(new MergeTokens(new UpperCaseToken(new SplitSentence(new SplitText(new Reader("D:/PipelineRight/input.txt")))))), null);
    writer = new SomePipeline.Writer("D:/output.txt", filter);
    System.out.println("Init finish");
  }

  public void myRun() {
    filter.start();
    writer.start();
    try {
      filter.join();
      writer.join();
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
  }

  public static void main(String[] args) {
    System.out.println("main()");
    (new SomePipeline()).myRun();
  }
}
