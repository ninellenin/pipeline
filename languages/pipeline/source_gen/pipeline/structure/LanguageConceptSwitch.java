package pipeline.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int ChooseLongestText = 0;
  public static final int ConcatenateTexts = 1;
  public static final int FilterExpression = 2;
  public static final int MergeSentences = 3;
  public static final int MergeTokens = 4;
  public static final int MyExpression = 5;
  public static final int Output = 6;
  public static final int Path = 7;
  public static final int Pipeline = 8;
  public static final int SentenceExpression = 9;
  public static final int SplitSentence = 10;
  public static final int SplitText = 11;
  public static final int TextExpression = 12;
  public static final int TokenExpression = 13;
  public static final int UpperCaseToken = 14;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x7655a5e7076c42d6L, 0xb8853f94b3d29c6bL);
    builder.put(0x7f95c2570815fac4L, ChooseLongestText);
    builder.put(0x263f3a003a63e943L, ConcatenateTexts);
    builder.put(0xc6a96ca6398e404L, FilterExpression);
    builder.put(0x674b7ca01205b88eL, MergeSentences);
    builder.put(0x674b7ca012123431L, MergeTokens);
    builder.put(0xc6a96ca639c6546L, MyExpression);
    builder.put(0xc6a96ca6398e26dL, Output);
    builder.put(0x2a3c2aa1ff0f8a8eL, Path);
    builder.put(0x5433b88ac5b47d87L, Pipeline);
    builder.put(0xc6a96ca63a273b2L, SentenceExpression);
    builder.put(0x2a3c2aa1fee9ce93L, SplitSentence);
    builder.put(0x5433b88ac5b47dabL, SplitText);
    builder.put(0x1b5e9c428d392f00L, TextExpression);
    builder.put(0x2321802eb867b494L, TokenExpression);
    builder.put(0x7f95c257080daea9L, UpperCaseToken);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
