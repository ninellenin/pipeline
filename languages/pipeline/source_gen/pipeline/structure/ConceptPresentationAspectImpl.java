package pipeline.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ConcatenateTexts;
  private ConceptPresentation props_FilterExpression;
  private ConceptPresentation props_MergeSentences;
  private ConceptPresentation props_MergeTokens;
  private ConceptPresentation props_MyExpression;
  private ConceptPresentation props_Output;
  private ConceptPresentation props_Path;
  private ConceptPresentation props_Pipeline;
  private ConceptPresentation props_SentenceExpression;
  private ConceptPresentation props_SplitSentence;
  private ConceptPresentation props_SplitText;
  private ConceptPresentation props_TextExpression;
  private ConceptPresentation props_TokenExpression;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ConcatenateTexts:
        if (props_ConcatenateTexts == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ConcatenateTexts");
          props_ConcatenateTexts = cpb.create();
        }
        return props_ConcatenateTexts;
      case LanguageConceptSwitch.FilterExpression:
        if (props_FilterExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FilterExpression");
          props_FilterExpression = cpb.create();
        }
        return props_FilterExpression;
      case LanguageConceptSwitch.MergeSentences:
        if (props_MergeSentences == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MergeSentences");
          props_MergeSentences = cpb.create();
        }
        return props_MergeSentences;
      case LanguageConceptSwitch.MergeTokens:
        if (props_MergeTokens == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MergeTokens");
          props_MergeTokens = cpb.create();
        }
        return props_MergeTokens;
      case LanguageConceptSwitch.MyExpression:
        if (props_MyExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MyExpression");
          props_MyExpression = cpb.create();
        }
        return props_MyExpression;
      case LanguageConceptSwitch.Output:
        if (props_Output == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Output");
          props_Output = cpb.create();
        }
        return props_Output;
      case LanguageConceptSwitch.Path:
        if (props_Path == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("path");
          props_Path = cpb.create();
        }
        return props_Path;
      case LanguageConceptSwitch.Pipeline:
        if (props_Pipeline == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Pipeline = cpb.create();
        }
        return props_Pipeline;
      case LanguageConceptSwitch.SentenceExpression:
        if (props_SentenceExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SentenceExpression");
          props_SentenceExpression = cpb.create();
        }
        return props_SentenceExpression;
      case LanguageConceptSwitch.SplitSentence:
        if (props_SplitSentence == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SentenceToTokens");
          props_SplitSentence = cpb.create();
        }
        return props_SplitSentence;
      case LanguageConceptSwitch.SplitText:
        if (props_SplitText == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("splitText");
          props_SplitText = cpb.create();
        }
        return props_SplitText;
      case LanguageConceptSwitch.TextExpression:
        if (props_TextExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TextExpression");
          props_TextExpression = cpb.create();
        }
        return props_TextExpression;
      case LanguageConceptSwitch.TokenExpression:
        if (props_TokenExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TokenExpression");
          props_TokenExpression = cpb.create();
        }
        return props_TokenExpression;
    }
    return null;
  }
}
